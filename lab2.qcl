include "lab1.qcl";
set dump-format "b"; //makes it easier to check that quantum state is actually correct

procedure Clear(qureg x) {
    int clear;
    int i;
    for i = 0 to #x-1 {
    	measure x[i], clear;
    	if ( clear != 0 ) { Not(x[i]); }
    }
}

procedure Encode7(qureg source, quvoid dest) {
    qureg scratch[1];
    teleport(source[0],dest[6],scratch[0]);
    H(dest[0:2]);
    CNot(dest[4], dest[1]);
    CNot(dest[5], dest[6]);
    CNot(dest[3], dest[0]);
    CNot(dest[4], dest[6]);
    CNot(dest[5], dest[2]);
    CNot(dest[3], dest[1]);
    CNot(dest[6], dest[0]);
    CNot(dest[3], dest[2]);
    CNot(dest[6], dest[1]);
    CNot(dest[5], dest[0]);
    CNot(dest[4], dest[2]);
    //spent upwards of 40 hours figuring out it was an endianness problem	
    Swap(dest[0],dest[6]);
    Swap(dest[1],dest[5]);
    Swap(dest[2],dest[4]);
}

operator CAT(quvoid anc) {
	int i;
    H(anc[0]);
	for i = 1 to #anc-1 {
		CNot(anc[i],anc[i-1]);
	}
}

procedure MakeCATState(quvoid anc, boolean err) {
    int errCount;
    int i; int j; int k;
    int meas;
    qureg ver[2];

    Clear(anc);

    CAT(anc);
    if (err) { Not(anc[0]); }

    // Verify CAT
    {
    	errCount = 0;
    	for i = 0 to #anc-1 {
    		for j = i+1 to #anc-1 {
    			Clear(ver);

				for k=0 to 1 {
						CNot(ver[k],anc[i]);
						CNot(ver[k],anc[j]);
						measure ver[k], meas;
						errCount = errCount + meas;
				}
    		}
    	}
    } until errCount == 0 or err;
}

//Stabilizers. Could reduce the LOC of these by like half if 
//QCL had first class functions.
operator G0(qureg lq, quvoid anc) {
    CNot(lq[3], anc[0]);
    CNot(lq[4], anc[1]);
    CNot(lq[5], anc[2]);
    CNot(lq[6], anc[3]);
}

operator G1(qureg lq, quvoid anc) {
    CNot(lq[1], anc[0]);
    CNot(lq[2], anc[1]);
    CNot(lq[5], anc[2]);
    CNot(lq[6], anc[3]);
}

operator G2(qureg lq, quvoid anc) {
    CNot(lq[0], anc[0]);
    CNot(lq[2], anc[1]);
    CNot(lq[4], anc[2]);
    CNot(lq[6], anc[3]);
}

operator G3(qureg lq, quvoid anc) {
    H(lq);
    G0(lq,anc);
    H(lq);
}

operator G4(qureg lq, quvoid anc) {
    H(lq);
    G1(lq,anc);
    H(lq);
}

operator G5(qureg lq, quvoid anc) {
    H(lq);
    G2(lq,anc);
    H(lq);
}

//The err parameter inserts a bit flip error into the third qubit if set to true
procedure FT7(qureg logicalqubit, boolean err) {
//why doesnt QCL have lists? Seriously.
    qureg anc0[4];
    qureg anc1[4];
    qureg anc2[4];
    qureg anc3[4];
    qureg anc4[4];
    qureg anc5[4];
//Not even integer arrays? 
    int g0;
    int g1;
    int g2;
    int g3;
    int g4;
    int g5;
    int index;

//and god forbid we have first class functions to loop through...
    MakeCATState(anc0, false);
    G0(logicalqubit, anc0);
    !CAT(anc0);

    MakeCATState(anc1, false);
    G1(logicalqubit, anc1);
    !CAT(anc1);

    MakeCATState(anc2, err);
    G2(logicalqubit, anc2);
    !CAT(anc2);

    MakeCATState(anc3, false);
    G3(logicalqubit, anc3);
    !CAT(anc3);

    MakeCATState(anc4, false);
    G4(logicalqubit, anc4);
    !CAT(anc4);

    MakeCATState(anc5, false);
    G5(logicalqubit, anc5);
    !CAT(anc5);

    measure anc0[0], g0;
    measure anc1[0], g1;
    measure anc2[0], g2;
    measure anc3[0], g3;
    measure anc4[0], g4;
    measure anc5[0], g5;

    print "Measured Errors: ",g0,g1,g2,g3,g4,g5;
    if (g0 + g1 + g2 > 0) {
        index = 4*g0 + 2*g1 + g2 - 1;
        print "Phase flip error in qubit ", index, " detected, applying Z gate";
        Z(logicalqubit[index]);
    }
    if (g3 + g4 + g5 > 0) {
        index = 4*g3 + 2*g4 + g5 - 1;
        print "Bit flip error in qubit ", index, " detected, applying X gate";
        X(logicalqubit[index]);
    }
}

operator X7(qureg logicalqubit) {
    X(logicalqubit);
}

operator Z7(qureg logicalqubit) {
    Z(logicalqubit);
}

operator H7(qureg logicalqubit) {
    H(logicalqubit);
}

operator CNot7(qureg logicalqubittarget, qureg logicalqubitsource) {
    CNot(logicalqubittarget, logicalqubitsource);
}

procedure addError(qureg logicalqubit,int i) {
		if (i mod 3 == 2) {
			Z(logicalqubit[i]);
			print "Phase flip error on qubit",i," inserted";
		} else { 
			if (i mod 3 == 1) {
				X(logicalqubit[i]);
				print "Bit flip error on qubit ",i," inserted";
			} else {
				Rot(pi/9, logicalqubit[i]);
				print "Rotation error on qubit ",i," inserted";
			}
		}
}

procedure test() {
	int i;
	qureg init[1];
	qureg logicalqubit[7];

	Encode7(init,logicalqubit);
	H7(logicalqubit);
	FT7(logicalqubit,false);
	print "Known good state";
	dump logicalqubit;

	for i = 0 to 6 {
		addError(logicalqubit,i);
		FT7(logicalqubit,false);
		print "Corrected logicalqubit qubit state:";
		dump logicalqubit;
	}

	reset;
	print "Error in ancillary qubits inserted";
	Encode7(init,logicalqubit);
	H7(logicalqubit);
	FT7(logicalqubit,true);
	dump logicalqubit;
	print "Error in logicalqubit qubit inserted";
	Rot(pi/9, logicalqubit[6]);
	FT7(logicalqubit,true);
	dump logicalqubit;
}

test();
